##### DEPENDENCIES

FROM --platform=linux/amd64 node:lts-alpine as deps
RUN apk add --no-cache libc6-compat openssl openssl-dev
WORKDIR /app

# Install Prisma Client

COPY ./prisma ./

# Install dependencies if lockfile exists

COPY package.json pnpm-lock.yaml ./

RUN \
 if [ -f pnpm-lock.yaml ]; \
 then \
  yarn global add pnpm && pnpm add prisma@4.16.2 && pnpm i --ignore-scripts; \
 else \
  echo "Lockfile not found." && exit 1; \
 fi

##### BUILDER

FROM --platform=linux/amd64 node:lts-alpine AS builder
RUN apk add --no-cache libc6-compat openssl openssl-dev
RUN yarn global add pnpm
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN SKIP_ENV_VALIDATION=1 pnpm exec prisma generate
ENV NEXT_TELEMETRY_DISABLED 1

# Pass the name of the Telegram bot from GitHub variables to the build process if it exists.
# This is required because the bot name is statically rendered for the Telegram login button.
RUN --mount=type=secret,id=NEXT_PUBLIC_TG_BOT_NAME \
    --mount=type=secret,id=NEXT_PUBLIC_TG_INFO_CHANNEL \
    if [ -f "/run/secrets/NEXT_PUBLIC_TG_BOT_NAME" ]; then \
      export NEXT_PUBLIC_TG_BOT_NAME=$(cat /run/secrets/NEXT_PUBLIC_TG_BOT_NAME); \
    else \
      echo "Secret NEXT_PUBLIC_TG_BOT_NAME not found."; \
    fi && \
    if [ -f "/run/secrets/NEXT_PUBLIC_TG_INFO_CHANNEL" ]; then \
      export NEXT_PUBLIC_TG_INFO_CHANNEL=$(cat /run/secrets/NEXT_PUBLIC_TG_INFO_CHANNEL); \
    else \
      echo "Secret NEXT_PUBLIC_TG_INFO_CHANNEL not found."; \
    fi && \
    if [ -f pnpm-lock.yaml ]; then \
      SKIP_ENV_VALIDATION=1 pnpm run build; \
    else \
      echo "Lockfile not found." && exit 1; \
    fi

##### RUNNER

FROM --platform=linux/amd64 node:lts-alpine AS runner
RUN apk add --no-cache libc6-compat openssl openssl-dev
RUN yarn global add pnpm
WORKDIR /app

ENV NODE_ENV production

ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/next.config.mjs ./
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/start.prod.sh ./
RUN chmod +x ./start.prod.sh
#RUN chown -R nextjs:nodejs app/node_modules/.prisma

USER nextjs
EXPOSE 3000
ENV PORT 3000

#Applying database migrations after the container is updated by Watchtower
LABEL com.centurylinklabs.watchtower.lifecycle.post-update="docker compose up dbsync"

CMD ["./start.prod.sh"]