version: "3.9"
name: hytky-prod
services:
  nginx:
    image: nginx:mainline-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d
    depends_on:
      - hytky

  hytky:
    image: "ghcr.io/zeeket/hytky/hytky:latest"
    container_name: hytky
    env_file:
      - ../.env
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      dbsync:
        condition: service_completed_successfully
    restart: always

  postgres:
    image: "postgres:15.1-alpine"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    env_file:
      - ../.env
    volumes:
      - ./hytky-postgres-data:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  dbsync:
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/Dockerfile.dbsync
    env_file:
      - ../.env
    depends_on:
      - postgres
    restart: no

  hytkybot:
    platform: "linux/amd64"
    image: "ghcr.io/zeeket/hytkybot/hytkybot:latest"
    env_file:
      - ../.hytkybot.env
    restart: always

  #certbot:
    #image: certbot/certbot
    #container_name: certbot
    #volumes:
      #- certbot-etc:/etc/letsencrypt
      #- certbot-var:/var/lib/letsencrypt
      #- web-root:/var/www/html
    #depends_on:
      #- nginx
    #command: certonly --webroot --webroot-path=/var/www/html --email sammy@your_domain --agree-tos --no-eff-email --staging -d your_domain  -d www.your_domain