// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  thread     Thread     @relation(fields: [threadId], references: [id])
  threadId   Int
  content    String     @db.Text
}

model Thread {
  id         Int        @id @default(autoincrement())
  name       String     @db.Text
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  content    String     @db.Text
  posts      Post[]
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String
  threads          Thread[]
  parentCategoryId Int?
  parentCategory   Category?  @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  childCategories  Category[] @relation("CategoryToCategory")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  createdById      String?
  createdBy        User?       @relation(fields: [createdById], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    categories    Category[]
    threads       Thread[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
