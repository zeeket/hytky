generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  authorId  String
  threadId  Int
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])
}

model Thread {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now())
  authorId   String
  categoryId Int
  posts      Post[]
  author     User     @relation(fields: [authorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String
  parentCategoryId Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  createdById      String?
  createdBy        User?      @relation(fields: [createdById], references: [id])
  parentCategory   Category?  @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  childCategories  Category[] @relation("CategoryToCategory")
  threads          Thread[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  categories    Category[]
  posts         Post[]
  sessions      Session[]
  threads       Thread[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
